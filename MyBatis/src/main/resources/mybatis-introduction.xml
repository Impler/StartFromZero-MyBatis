<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 
		MyBatis可以引用外部properties文件，也可以通过property元素配置 
		property属性可以在整个配置文件中引用的到${password}
		
		MyBatis将会从三处加载property：
		1. 加载properties元素配置的属性
		2. 加载类路径下resource/url属性指定的外部property文件
		3. 加载创建SqlSessionFactory时传递的Property参数对象
		后面的属性将覆盖前面的同名属性
	-->
	<properties resource="db.properties">
		<property name="password" value="root"/>
	</properties>
	<!-- 
		settings用于全局配置MyBatis的行为，包括缓存、加载方式、默认值等
	 -->
	<settings>
		<!-- 是否启用缓存 true/false， 默认true -->
		<setting name="cacheEnabled" value="true"/>
		<!-- 是否延迟加载关联属性true/false，默认true，可以被fetchType覆盖-->
		<setting name="lazyLoadingEnabled" value="true"/>
		<!-- 是否允许一条语句返回多个结果集true/false，默认true -->
		<setting name="multipleResultSetsEnabled" value="true"/>
		<!-- 是否使用数据表列标签代替列名称true/false，默认true，依赖数据库驱动实现 -->
		<setting name="useColumnLabel" value="true"/>
		<!-- 是否启用自动生成key，true/false, 默认false -->
		<setting name="useGeneratedKeys" value="false"/>
		<setting name="autoMappingBehavior" value="PARTIAL"/>
		<setting name="defaultExecutorType" value="SIMPLE"/>
		<setting name="defaultStatementTimeout" value="25"/>
		<setting name="defaultFetchSize" value="100"/>
		<setting name="safeRowBoundsEnabled" value="false"/>
		<setting name="mapUnderscoreToCamelCase" value="false"/>
		<setting name="localCacheScope" value="SESSION"/>
		<setting name="jdbcTypeForNull" value="OTHER"/>
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
	</settings>
	
	<!-- 
		为java全限定类名定义别名
		内置默认的java类型别名：
		_int -- int
		_integer -- int
		int -- Integer
		integer -- Integer
		string -- String
		object -- Object
		map -- Map
		hashmap -- HashMap
		list -- List
		基本数据类型的别名以_开头，其他数据类型以及基本数据类型的包装类别名为小写类名
	 -->
	<typeAliases>
		<typeAlias alias="user" type="com.study.mybatis.domain.User"/>
		<!-- 为package下所有的bean设置别名，为首字母小写的类名，遇到@Alias以注解配置为准 -->
		<package name="com.study.mybatis.domain"/>
	</typeAliases>
	
	<!-- 
		当从结果集读取数据，或 设置PreparedStatement参数时，需要使用TypeHandler适配数据类型
		自定义handler，实现TypeHandler接口或继承BaseTypeHandler
	 -->
	<typeHandlers>
		<package name=""/>
		<typeHandler handler="com.study.mybatis.handler.XXXHandler" javaType="com.study.mybatis.domain.XXX" jdbcType=""/>
	</typeHandlers>
	
	<!-- 
		ObjectFactory 对象用于创建result对象，默认的ObjectFactory 仅仅实例化目标类通过其构造方法。
		可以通过继承DefaultObjectFactory 来重写默认的行为
	 -->
	<objectFactory type="xxx">
		<property name="" value=""/>
	</objectFactory>
	
	<!-- 
		plugins允许在执行sql过程中特定的地点拦截对指定方法的调用
		•Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
		•ParameterHandler (getParameterObject, setParameters)
		•ResultSetHandler (handleResultSets, handleOutputParameters)
		•StatementHandler (prepare, parameterize, batch, update, query)
		自定义plugin需实现Interceptor接口
	 -->
	<plugins>
		<plugin interceptor="xxx">
			<property name="" value=""/>
		</plugin>
	</plugins>
	
	<!-- 
		environments可用于配置多套环境，例如开发、测试环境
	 -->
	<environments default="development">
		<!-- 每个environment都 要有独立的id，默认为development-->
		<environment id="development">
			<!-- 
				两种transaction type:
				JDBC: 通过java.sql.Connection对象完成对事务的提交、回滚等操作
				MANAGED:MyBatis自身不会去实现事务管理，而是让程序的运行容器如（JBOSS，Weblogic）来实现对事务的管理 
			 -->
			<transactionManager type="JDBC">
				<property name="" value=""/>
			</transactionManager>
			<!-- 
				配置数据源
				三种内置的数据源类型：
				UNPOOLED：不使用连接池，针对每次请求创建或关闭连接
				POOLED：使用连接池
				JNDI:
			 -->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}"/>
				<property name="url" value=""/>
				<property name="username" value="root"/>
				<property name="password" value="root"/>
			</dataSource>
		</environment>
	</environments>
	
	<!-- MyBatis能够执行不同的语句，这取决于您的数据库供应商 -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- property 为不同的数据库设置别名 -->
		<property name="SQL Server" value="sqlserver"/>
		<property name="DB2" value="db2"/>
		<property name="Oracle" value="oracle" />
	</databaseIdProvider>
	
	<!-- 
		mappers用来告诉MyBatis sql映射文件的位置
		MyBatis支持类路径下的资源路径、url或mapper类的类名或所在包名 
	-->
	<mappers>
		<!-- 类路径下的资源 -->
		<mapper resource="xxxMapper.xml"/>
		<!-- URL资源 -->
		<mapper url="file:///xxxMapper.xml"/>
		<!-- Mapper类的全限定类名或包名 -->
		<mapper class="xxxMapper"/>
		<package name="xxx"/>
	</mappers>
</configuration>

